// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int start;
    static int end;
    static int mem;

    /** Initializes the class. */
    function void init() {
        let start = 2048;
        let end = 16383;
        let mem = start;
        let mem[0] = end - start;
        let mem[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        if(size < 0){
            do Sys.error(5);
        }
        return Memory.fit(size);
    }

    function int fit(size){
        var Array prev, curr, next;
        let prev = null;
        let curr = mem;

        while(~(curr = 0)){
            if(curr[0] - 1 = size){
                do Memory.delete(prev, curr);
                return curr + 1;
            }
            if(curr[0] > (size + 2)){
                let curr[(curr[0] -1) - size] = size + 1;
                let next = curr + curr[0] - size;
                let curr[0] = curr[0] - size - 1;
                return next;
            }
            let prev = curr;
            let curr = curr[1];
        }
        do Sys.error(6);
        return null;
    }

    function void delete(int prev, int curr){
        if (prev = 0){
            let mem = curr[1];
        }
        else{
            let prev[1] = curr[1];
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array prev, curr, next;
        var boolean found;

        let next = object - 1;
        if(mem = 0){
            let mem = next;
            let mem[1] = 0;
            return;
        }

        let prev = mem;
        let curr = mem[1];
        let found = false;

        while((~(curr = 0)) & (~found)){
            if (~(curr[1] = 0)){
                if(next < curr[1]){
                    let prev = curr;
                    let curr = curr[1];
                }
            }
            else {
                let found = true;
            }
        }

        let prev[1] = next;
        let next[1] = curr;
        return;
    }    
}
